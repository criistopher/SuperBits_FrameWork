/*
 *   Super-Bits.com CODE CNPJ 20.019.971/0001-90

 */
package com.super_bits.modulosSB.Persistencia.dao;

import com.super_bits.modulosSB.Persistencia.ConfigGeral.SBPersistencia;
import com.super_bits.modulosSB.SBCore.BeansInterface.basico.ItfBeanSimples;
import com.super_bits.modulosSB.SBCore.ConfigGeral.SBCore;
import com.super_bits.modulosSB.SBCore.Mensagens.ItfCentralMensagens;
import com.super_bits.modulosSB.SBCore.TratamentoDeErros.ErroSB;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.metamodel.EntityType;
import org.hibernate.exception.JDBCConnectionException;

/**
 *
 * Conjunto de metodos estatiscos para auxiliar no acesso ao banco de dados
 *
 *
 * @author Sálvio Furbino <salviof@gmail.com>
 * @since 19/07/2013
 *
 */
public class UtilSBPersistencia implements Serializable, ItfDados {

    private static final long serialVersionUID = -2192204854360894435L;
    private static EntityManagerFactory emFacturePadrao;
    private static final int MAXIMO_REGISTROS = 2000;

    public static enum TIPO_ALTERACAO_BANCO {

        MERGE, DELETE, INSERT
    };

    //* TIPOS DE SELEÇÃO DE LISTAS MAIS COMUNS */
    public static enum TIPO_SELECAO_REGISTROS {

        JPQL, SQL, LIKENOMECURTO, TODOS, NAMED_QUERY, SBNQ;
    }

    //* TIPOS DE SELEÇÃO DE ITEM MAIS COMUNS */
    public static enum TipoSelecaoRegistro {

        ID, NOMECURTO, LIKENOMECURTO, SQL, JPQL, ULTIMO_REGISTRO, PRIMEIRO_REGISTRO
    }

    private static Map<String, EntityManagerFactory> bancoExtra = new HashMap<String, EntityManagerFactory>();

    /**
     *
     * Cria um novo entity Manager, O entity Manager gera uma nova conexão com o
     * banco que só encerrada após o comando close
     *
     * @param pNomeBanco Caso em branco ou nulo retorna EM padrão.
     * @return Nulo se não for possível criar, e a entidade caso consiga
     */
    public synchronized static EntityManager getNovoEM(String pNomeBanco) {
        EntityManager novoEM = null;

        if (pNomeBanco == null || pNomeBanco.length() == 0) {
            try {
                return getNovoEM();
            } catch (Exception e) {
                return null;
            }
        }

        try {
            EntityManagerFactory fabrica = bancoExtra.get(pNomeBanco);

            if (fabrica == null) {
                System.out.println("Criando EMF" + pNomeBanco);
                fabrica = Persistence.createEntityManagerFactory(pNomeBanco);
                fabrica.getCache().evictAll();
                if (fabrica == null) {
                    SBCore.RelatarErro(ErroSB.TIPO_ERRO.PARA_TUDO, " Erro criando EntityFactury" + pNomeBanco);
                }
                bancoExtra.put(pNomeBanco, fabrica);
            }
            if (fabrica != null) {
                fabrica.getCache().evictAll();

                return fabrica.createEntityManager();
            }
        } catch (Throwable e) {
            SBCore.RelatarErro(ErroSB.TIPO_ERRO.ALERTA_SISTEMA, " Erro tentando Localizar o EMF:" + pNomeBanco, e);
            return null;
        }
        return null;
    }

    private static void renovarConexao() {
        emFacturePadrao = null;
        getNovoEM();
    }

    /**
     *
     * Cria um novo entity Manager, do Banco padrão entity Manager gera uma nova
     * conexão com o banco que só encerrada após o comando close
     *
     * @return Nulo se não for possível criar, e a entidade caso consiga
     */
    public static EntityManager getNovoEM() {

        try {
            if (emFacturePadrao == null) {

                emFacturePadrao = Persistence.createEntityManagerFactory(SBPersistencia.getNomeBancoPadrao());
            }
        } catch (Exception e) {
            SBCore.RelatarErro(ErroSB.TIPO_ERRO.ALERTA_PROGRAMADOR, "Erro tentando criar entitymanagerFacturePAdrão=" + SBPersistencia.getNomeBancoPadrao(), e);
            try {
                emFacturePadrao = Persistence.createEntityManagerFactory(SBPersistencia.getNomeBancoPadrao());
            } catch (Throwable ee) {
                SBCore.RelatarErro(ErroSB.TIPO_ERRO.ALERTA_PROGRAMADOR, "Erro tentando criar entitymanagerFActurePadrão, segunda tentativa=" + SBPersistencia.getNomeBancoPadrao(), ee);
            }
        }

        //for (String propriedade : emFacturePadrao.getProperties().keySet()) {
        //   System.out.println("Propriedade" + propriedade + "Tipo Objeto:" + emFacturePadrao.getProperties().get(propriedade).getClass().getSimpleName()
        //          + "=" + emFacturePadrao.getProperties().get(propriedade).toString());
        // }
        try {

            try {
                EntityManager emcriada = emFacturePadrao.createEntityManager();

                if (emcriada == null || !emFacturePadrao.isOpen() || !emcriada.isOpen()) {
                    throw new Exception("Erro tentando criar EntityManager");
                }
                return emcriada;
            } catch (Throwable e) {
                SBCore.RelatarErro(ErroSB.TIPO_ERRO.ALERTA_PROGRAMADOR, "Erro tentando criar entitymanager" + SBPersistencia.getNomeBancoPadrao(), e);
                System.out.println("Recirando Factury na tentativa de gerar um novo EM");
                emFacturePadrao = Persistence.createEntityManagerFactory(SBPersistencia.getNomeBancoPadrao());
                return emFacturePadrao.createEntityManager();
            }

        } finally {
            emFacturePadrao.getCache().evictAll();
        }
    }

    public UtilSBPersistencia() {

        if (emFacturePadrao == null) {
            emFacturePadrao = Persistence.createEntityManagerFactory(SBPersistencia.getNomeBancoPadrao());
            emFacturePadrao.getCache().evictAll();
        }

    }

    public static EntityManagerFactory getEmfabricaPadrao() {
        if (emFacturePadrao == null) {
            emFacturePadrao = Persistence.createEntityManagerFactory(SBPersistencia.getNomeBancoPadrao());
            emFacturePadrao.getCache().evictAll();
        }

        return emFacturePadrao;
    }

    /**
     * Define qual EM será utilizada de acordo com os parametros enviados
     */
    static private EntityManager defineEM(EntityManager pEmEnviada, String pNomeEntityManager) {

        try {
            if (pEmEnviada != null) {
                return pEmEnviada;
            } else {
                return getNovoEM(pNomeEntityManager);
            }

        } catch (Exception e) {
            SBCore.RelatarErro(ErroSB.TIPO_ERRO.ALERTA_PROGRAMADOR, "Erro selecionando o tipo de entidade a ser retornada", e);
            return null;
        }
    }

    /**
     * Função que executa Alterações em Banco de Dados
     */
    private static Object executaAlteracaoEmBancao(Object pEntidade, List<Object> pEntidades, EntityManager pEM, TIPO_ALTERACAO_BANCO pTipoAlteracao) {

        try {
            System.out.println("executando alteração do tipo" + pTipoAlteracao);
            if (SBCore.isControleDeAcessoDefinido()) {
                if (!SBCore.getConfiguradorDeAcessos().ACAOCRUD(pEntidade.getClass(), pTipoAlteracao.toString())) {
                    SBCore.getCentralDeMensagens().enviaMensagemUsuario("Ação não permita para este usuário, solicite permição ao Administrador", ItfCentralMensagens.TP_MENSAGEM.AVISO);
                    if (pTipoAlteracao == TIPO_ALTERACAO_BANCO.INSERT) {
                        return false;
                    } else {
                        return null;
                    }
                }
            }
        } catch (Exception e) {
            SBCore.RelatarErro(ErroSB.TIPO_ERRO.ALERTA_PROGRAMADOR, "Erro Verificando permissoes de CRUD", e);

            if (e.getCause() != null) {
                if (e.getCause().getClass().getSimpleName().equals(JDBCConnectionException.class.getSimpleName())) {
                    renovarConexao();
                }
            }

        }

        try {

            boolean entidadePaiEnviada = false;
            if (pEM != null) {
                entidadePaiEnviada = true;
            }

            EntityManager em = defineEM(pEM, null);
            if (em == null) {
                throw new Exception("Impossível definir o entityManager ");
            }

            List<Object> objetosPersistidos = new ArrayList<>();
            if (pEntidade != null) {
                objetosPersistidos.add(pEntidade);
            }
            if (pEntidades != null) {
                objetosPersistidos = pEntidades;
            }

            try {

                try {
                    boolean controleTranzacaoExterno = false;
                    if (!em.getTransaction().isActive()) {
                        em.getTransaction().begin();
                        controleTranzacaoExterno = true;
                    }

                    boolean sucesso = false;
                    Object novoRegistro = objetosPersistidos.get(0);
                    for (Object entidade : objetosPersistidos) {
                        sucesso = false;
                        novoRegistro = entidade;
                        switch (pTipoAlteracao) {

                            case DELETE:

                                em.remove(em.getReference(entidade.getClass(), ((ItfBeanSimples) entidade).getId()));
                                sucesso = true;
                                break;
                            case INSERT:
                                em.persist(entidade);
                                sucesso = true;
                                break;
                            case MERGE:

                                novoRegistro = em.merge(entidade);
                                sucesso = true;
                                break;
                            default:
                                break;

                        }
                    }

                    if (controleTranzacaoExterno) {
                        em.getTransaction().commit();

                    }
                    if (pTipoAlteracao == TIPO_ALTERACAO_BANCO.MERGE) {
                        if (sucesso) {
                            SBCore.getCentralDeMensagens().enviaMensagemUsuario("Registro Alterado com Sucesso", ItfCentralMensagens.TP_MENSAGEM.AVISO);
                            return novoRegistro;
                        } else {
                            SBCore.getCentralDeMensagens().enviaMensagemUsuario("Ocorreu um erro Ao Atualizar o registro", ItfCentralMensagens.TP_MENSAGEM.ERRO);
                            return null;
                        }
                    } else {
                        if (sucesso) {
                            SBCore.getCentralDeMensagens().enviaMensagemUsuario("Registro Cadastrado com sucesso", ItfCentralMensagens.TP_MENSAGEM.AVISO);
                        } else {
                            SBCore.getCentralDeMensagens().enviaMensagemUsuario("Ocorreu um erro Ao Inserir o registro", ItfCentralMensagens.TP_MENSAGEM.ERRO);
                        }
                        return sucesso;
                    }
                } catch (Exception e) {

                    SBCore.getCentralDeMensagens().enviaMensagemUsuario(new Date() + "Erro executando alteração no banco do tipo" + pTipoAlteracao + pEntidade + e.getMessage(), ItfCentralMensagens.TP_MENSAGEM.ERRO);
                    SBCore.RelatarErro(ErroSB.TIPO_ERRO.ALERTA_PROGRAMADOR, "Erro executando alteração em Banco", e);

                    if (!em.getTransaction().isActive()) {
                        try {
                            em.getTransaction().rollback();
                        } catch (Exception e2) {
                            System.out.println("Erro executando roolback devido a falha na inserção");
                        }
                    }

                    if (pTipoAlteracao == TIPO_ALTERACAO_BANCO.MERGE) {
                        return null;
                    } else {
                        return false;
                    }
                }

            } finally {
                if (!entidadePaiEnviada) {
                    if (em != null) {
                        em.close();
                    }
                }
            }

        } catch (Exception e) {
            SBCore.RelatarErro(ErroSB.TIPO_ERRO.ALERTA_PROGRAMADOR, "Erro tentando obter Entity Manager (EM)", e);
            if (pTipoAlteracao == TIPO_ALTERACAO_BANCO.MERGE) {
                return null;
            } else {
                return false;
            }
        }
    }

    /**
     * Codigo padrão para realizar Select de Registros
     *
     *
     * @param pNomeEM Nome do entity maneger extra
     * @param pEM Entity manager a ser utilizado
     * @param pSQL sql que será executado
     * @param pPQL PQL (Persistence query Language)
     * @param maximo Maximo de registros retornados (equivale a limit x) no fim
     * do select
     * @param tipoRegisto Tipo de registro selecionado
     * @param pTipoSelecao
     * @param parametros
     * @return
     */
    private static List<?> selecaoRegistros(EntityManager pEM, String pSQL, String pPQL, Integer maximo, Class tipoRegisto, TIPO_SELECAO_REGISTROS pTipoSelecao, Object... parametros) {
        // todo Se origem for uma MBPAGINA  utilizar o EntityManager da pagina
        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
        String nomeMetodo = stackTraceElements[3].getMethodName();
        String nomeClasse = stackTraceElements[3].getClassName();
        String[] classeFull = nomeClasse.split("\\.");

        if (maximo == null) {
            maximo = -1;
        }
        try {
            Boolean entityManagerPaiEnviado = false;
            EntityManager em = null;
            if (pEM == null) {
                em = getNovoEM();
            } else {
                em = pEM;
                entityManagerPaiEnviado = true;
            }

            if (maximo > MAXIMO_REGISTROS) {
                maximo = MAXIMO_REGISTROS;
                SBCore.RelatarErro(ErroSB.TIPO_ERRO.ALERTA_PROGRAMADOR, "Voce selecionou mais registros que o configurado como permitido pelo sistema  ");
            }

            try {
                try {
                    String sql = "";
                    switch (pTipoSelecao) {
                        case LIKENOMECURTO:

                            ItfBeanSimples registro = (ItfBeanSimples) tipoRegisto.newInstance();
                            String campoNomeCurto = registro.getCampoSQLNomeCurto();
                            String parametro = (String) parametros[0];
                            sql = "from " + tipoRegisto.getSimpleName() + " where "
                                    + campoNomeCurto + " like '" + parametro + "'";
                            break;
                        case JPQL:
                            sql = pPQL;
                            break;
                        case SQL:
                            sql = pSQL;
                            break;
                        case TODOS:
                            sql = "from " + tipoRegisto.getSimpleName();
                            break;
                        default:
                            break;
                    }
                    Query consulta = null;
                    if (pTipoSelecao == TIPO_SELECAO_REGISTROS.SQL) {
                        consulta = em.createNativeQuery(sql);
                    } else {
                        consulta = em.createQuery(sql);
                    }

                    if (maximo != -1 && maximo != 0) {
                        System.out.println("SetMaximo=" + maximo);
                        consulta.setMaxResults(maximo);
                    }

                    if (parametros != null && parametros.length > 0) {
                        int i = 1;
                        for (Object pr : parametros) {
                            consulta.setParameter(i, pr);
                            i++;
                        }
                    }
                    List resultado = consulta.getResultList();
                    if (resultado.size() > MAXIMO_REGISTROS) {
                        System.out.println("este select retorna mais de" + MAXIMO_REGISTROS + "o sistema não deixará de executar, mas não posso deixar de perguntar Isto está certo ??");
                        System.out.println("sql");
                    }
                    return resultado;
                } catch (Throwable e) {
                    if (e.getCause() != null) {
                        if (e.getCause().getClass().getSimpleName().equals(JDBCConnectionException.class.getSimpleName())) {
                            renovarConexao();
                        }
                    }

                    SBCore.RelatarErro(ErroSB.TIPO_ERRO.ALERTA_PROGRAMADOR, "Erro criando ou executando uma query", e);
                    return new ArrayList();
                }

            } finally {
                if (!entityManagerPaiEnviado) {
                    System.out.println("ENtity não Enviado=" + entityManagerPaiEnviado + " Fechando conexao");
                    if (em != null && !entityManagerPaiEnviado) {
                        if (em.isOpen()) {
                            em.close();
                        }
                    }
                }
            }

        } catch (Exception e) {
            SBCore.RelatarErro(ErroSB.TIPO_ERRO.ALERTA_PROGRAMADOR, pPQL, e);
            return new ArrayList();
        }

    }

    /**
     *
     * @param pNomeEM Nome do Entity Manager especial (Não é obrigatório)
     * @param pEM Entity Manager que será utilizado (Não é obrigatório)
     * @param pSQL Sql a ser executado
     * @param pPQL Persistence Query Linguage
     * @param maximo Maximo
     * @param tipoRegisto Tipo de registro
     * @param pTipoSelecao Tipo de seleção
     * @param parametros Parametros
     * @return
     */
    private static Object selecaoRegistro(EntityManager pEM, String pSQL, String pPQL, Class pClasseRegisto, TipoSelecaoRegistro pTipoSelecao, Object... parametros) {
        boolean entityManagerPaiEnviado = false;
        try {
            EntityManager em;
            if (pEM != null) {
                em = pEM;
                entityManagerPaiEnviado = true;
            } else {
                em = getNovoEM();
            }
            try {
                try {
                    Query consulta;
                    String sql = "";
                    switch (pTipoSelecao) {
                        case ID:
                            Object resposta = em.find(pClasseRegisto, parametros[0]);
                            return resposta;

                        case NOMECURTO:
                            ItfBeanSimples registroNC = (ItfBeanSimples) pClasseRegisto.newInstance();
                            String campoNomeCurtoNC = registroNC.getCampoSQLNomeCurto();
                            String parametroNC = (String) parametros[0];
                            sql = "from " + pClasseRegisto.getSimpleName() + " where "
                                    + campoNomeCurtoNC + " = '" + parametroNC + "'";

                            break;
                        case LIKENOMECURTO:
                            ItfBeanSimples registro = (ItfBeanSimples) pClasseRegisto.newInstance();
                            String campoNomeCurto = registro.getCampoSQLNomeCurto();
                            String parametro = (String) parametros[0];
                            sql = "from " + pClasseRegisto.getSimpleName() + " where "
                                    + campoNomeCurto + " like '" + parametro + "'";

                        case PRIMEIRO_REGISTRO:
                            break;
                        case SQL:
                            sql = pSQL;
                            break;
                        case ULTIMO_REGISTRO:
                            break;
                        case JPQL:
                            sql = pPQL;
                            break;
                    }
                    if (pTipoSelecao == TipoSelecaoRegistro.SQL) {
                        if (pClasseRegisto == null) {
                            System.out.println("Criando Query por string:" + sql);
                            consulta = em.createNativeQuery(sql);
                        } else {
                            System.out.println("Criando JPQL por string:" + sql);
                            consulta = em.createNativeQuery(sql, pClasseRegisto);
                        }

                    } else {

                        if (pClasseRegisto == null) {
                            consulta = em.createQuery(sql);
                        } else {
                            consulta = em.createQuery(sql, pClasseRegisto);
                        }
                    }
                    consulta.setMaxResults(1);

                    List<?> resposta = consulta.getResultList();
                    if (resposta.isEmpty()) {
                        return null;
                    }
                    return resposta.get(0);

                } catch (Exception e) {
                    if (e.getCause() != null) {
                        if (e.getCause().getClass().getSimpleName().equals(JDBCConnectionException.class.getSimpleName())) {
                            renovarConexao();
                        }
                    }
                    SBCore.RelatarErro(ErroSB.TIPO_ERRO.ALERTA_PROGRAMADOR, "Erro criando ou executando uma query de registro ybuci", e);
                    return null;
                }

            } finally {
                if (!entityManagerPaiEnviado) {
                    if (em != null) {
                        em.close();
                    }
                }
            }

        } catch (Exception e) {
            SBCore.RelatarErro(ErroSB.TIPO_ERRO.ALERTA_PROGRAMADOR, "Erro definindo EM para select de registro unico", e);
            return null;
        }
    }

    /**
     * Realizar Merg de Objeto (cria se o key primario não existir, e atualiza
     * caso exista).
     *
     * @param obj Objeto que será salvo em banco
     * @param pEm Entity manager que será utilizado
     * @return Objeto apos ser persistido em banco
     */
    public static Object mergeRegistro(Object obj, EntityManager pEm) {
        return executaAlteracaoEmBancao(obj, null, pEm, TIPO_ALTERACAO_BANCO.MERGE);

    }

    /**
     * Realizar Merg de Objeto (cria se o primario não existir, e atualiza caso
     * exista).
     *
     * @param object
     * @return
     */
    public static Object mergeRegistro(Object object) {
        if (object == null) {
            SBCore.RelatarErro(ErroSB.TIPO_ERRO.ALERTA_PROGRAMADOR, "O registro enviado para Persistencia é nulo");
            return null;
        }
        return executaAlteracaoEmBancao(object, null, null, TIPO_ALTERACAO_BANCO.MERGE);

    }

    /**
     *
     * Cria uma conexão. inicia uma transação Executa o merge em cada objeto
     * enviado. só efetua o commit caso todos tenham sido atualizados, a nao ser
     * que o reverterem caso de falha senja falso Neste caso, cria-se uma
     * conexão para cada update
     *
     * @param pObjetos
     * @param pReverterEmCasoDeFalha
     * @return Um array de obejtos apenas com os objetos que foram salvos, um
     * array em branco caso nenhum tenha sido salvo
     */
    public static Object[] MergeListaRegistros(Object[] pObjetos, boolean pReverterEmCasoDeFalha) {
        //TODO Edu
        throw new UnsupportedOperationException("Não implementado ainda");

    }

    public static Object[] MergeListaRegistros(Object[] pObjetos) {
        return MergeListaRegistros(pObjetos, false);

    }

    /**
     * Realizar INSERT persistindo o Objeto no Banco
     *
     * @param pObj Objeto a ser persistido em banco
     * @param pEM Entidade utilizada
     * @return retorna True se persistido e False se algum erro acontecer
     */
    public static boolean persistirRegistro(Object pObj, EntityManager pEM) {
        return (boolean) executaAlteracaoEmBancao(pObj, null, pEM, TIPO_ALTERACAO_BANCO.INSERT);
    }

    /**
     *
     * @param pObj
     * @param pEM
     * @return
     */
    public static boolean persistirRegistro(Object pObj) {
        return (boolean) executaAlteracaoEmBancao(pObj, null, null, TIPO_ALTERACAO_BANCO.INSERT);
    }

    /**
     *
     * @param pObj Registro que será excluído
     * @return true se conseiguir exculir, false se não conseguir
     */
    public static boolean exluirRegistro(Object pObj) {
        return (boolean) executaAlteracaoEmBancao(pObj, null, null, TIPO_ALTERACAO_BANCO.DELETE);
    }

    /**
     *
     * @param pObj Registro que será excluído
     * @return true se conseiguir exculir, false se não conseguir
     */
    public static boolean exluirRegistro(Object pObj, EntityManager em) {
        return (boolean) executaAlteracaoEmBancao(pObj, null, em, TIPO_ALTERACAO_BANCO.DELETE);
    }

    /**
     * @param pNomeCurto String Que deseja localizar no Banco
     * @param classe Classe utilizada
     * @return Lista com registros like nomecurto
     */
    public static List<?> getListaRegistrosLikeNomeCurto(String pNomeCurto, Class classe) {
        return selecaoRegistros(null, null, null, null, classe, TIPO_SELECAO_REGISTROS.LIKENOMECURTO, pNomeCurto);
    }

    public static List<?> getListaRegistrosLikeNomeCurto(String pNomeCurto, Class classe, EntityManager pEM) {
        return selecaoRegistros(pEM, null, null, null, classe, TIPO_SELECAO_REGISTROS.LIKENOMECURTO, pNomeCurto);
    }

    public static List<?> getListaTodos(Class pClasse) {

        if (pClasse == null) {
            SBCore.RelatarErro(ErroSB.TIPO_ERRO.ALERTA_PROGRAMADOR, "");
            return null;
        }

        return selecaoRegistros(null, null, null, null, pClasse, TIPO_SELECAO_REGISTROS.TODOS);
    }

    public static List<?> getListaTodos(Class pClasse, EntityManager pEm) {

        if (pClasse == null) {
            SBCore.RelatarErro(ErroSB.TIPO_ERRO.ALERTA_PROGRAMADOR, "");
            return null;
        }

        return selecaoRegistros(pEm, null, null, null, pClasse, TIPO_SELECAO_REGISTROS.TODOS);
    }

    /**
     * @param pHQl HQO (Comando no formato Hibernate query language)
     * @param pMaximo
     * @param parametros parametros
     * @return lista de registros
     */
    public static List<?> getListaRegistrosByHQL(String pHQl, int pMaximo, Object... parametros) {
        return selecaoRegistros(null, null, pHQl, pMaximo, null, UtilSBPersistencia.TIPO_SELECAO_REGISTROS.JPQL, parametros);
    }

    /**
     *
     *
     * @param pHQl HQO (Comando no formato Hibernate query language)
     * @param pMaximo
     * @param pEM Entity manager utilizado
     * @param parametros parametros
     * @return lista de registros
     */
    public static List<?> getListaRegistrosByHQL(String pHQl, int pMaximo, EntityManager pEM, Object... parametros) {
        return selecaoRegistros(pEM, null, pHQl, pMaximo, null, UtilSBPersistencia.TIPO_SELECAO_REGISTROS.JPQL, parametros);
    }

    /**
     * @param pHQl HQO (Comando no formato Hibernate query language)
     * @param pMaximo
     * @param parametros parametros
     * @return lista de registros
     */
    public static List<?> getListaRegistrosBySQL(String pSQl, int pMaximo, Object... parametros) {
        return selecaoRegistros(null, pSQl, null, pMaximo, null, UtilSBPersistencia.TIPO_SELECAO_REGISTROS.SQL, parametros);
    }

    public static List<?> getListaRegistrosBySQL(EntityManager pEm, String pSQl, int pMaximo, Object... parametros) {
        return selecaoRegistros(pEm, pSQl, null, pMaximo, null, UtilSBPersistencia.TIPO_SELECAO_REGISTROS.SQL, parametros);
    }

    /**
     *
     * @param pClasse Classe referente
     * @param parametro nome curto que será localizado
     * @return registro encontrado
     */
    public static Object getRegistroByNomeCurto(Class pClasse, String parametro) {
        return selecaoRegistro(null, null, null, pClasse, UtilSBPersistencia.TipoSelecaoRegistro.NOMECURTO, parametro);
    }

    public static Object getRegistroByLikeNomeCurto(Class pClasse, String parametro) {
        return selecaoRegistro(null, null, null, pClasse, UtilSBPersistencia.TipoSelecaoRegistro.LIKENOMECURTO, parametro);
    }

    public static Object getRegistroByLikeNomeCurto(Class pClasse, String parametro, EntityManager pEm) {
        return selecaoRegistro(pEm, null, null, pClasse, UtilSBPersistencia.TipoSelecaoRegistro.LIKENOMECURTO, parametro);
    }

    /**
     *
     * @param pClasse Classe referente
     * @param parametro nome curto localizado
     * @param pNomeEM Entity Manager especial (diferente da entidade padrão)
     * @return registro encontrado
     */
    public static Object getRegistroByNomeCurto(Class pClasse, String parametro, EntityManager pEM) {
        return selecaoRegistro(pEM, null, null, pClasse, UtilSBPersistencia.TipoSelecaoRegistro.NOMECURTO);
    }

    /**
     *
     * @param pSQL String SQL que será executado
     * @param pNomeEM Registro pelo sql
     * @return
     */
    public static Object getRegistroBySQL(String pSQL, EntityManager pEM) {
        return selecaoRegistro(pEM, pSQL, null, null, TipoSelecaoRegistro.SQL);
    }

    /**
     *
     * @param pSQL String SQL que será executado
     * @return
     */
    public static Object getRegistroBySQL(String pSQL) {
        return selecaoRegistro(null, pSQL, null, null, TipoSelecaoRegistro.SQL);
    }

    /**
     *
     * @param pSQL Stirng com JPQLsql
     * @param pNomeEM Nome do entity Manager
     * @return
     */
    public static Object getRegistroByJPQL(String pSQL, EntityManager pEM) {
        return selecaoRegistro(pEM, null, pSQL, null, TipoSelecaoRegistro.JPQL);
    }

    /**
     *
     * @param pSQL Sting com sql
     * @param limite limite de registros
     * @return
     */
    public static Object getRegistroByJPQL(String pSQL) {
        return selecaoRegistro(null, null, pSQL, null, TipoSelecaoRegistro.JPQL);
    }

    public static Object getRegistroByJPQL(String pSQL, Class pClasse) {
        return selecaoRegistro(null, null, pSQL, pClasse, TipoSelecaoRegistro.JPQL);
    }

    public static Object getRegistroByJPQL(String pSQL, Class pClasse, EntityManager pEM) {
        return selecaoRegistro(pEM, null, pSQL, pClasse, TipoSelecaoRegistro.JPQL);
    }

    /**
     *
     * @param pClasse Classe do registro
     * @param id id do registro
     * @param pNomeEM nome da entidade
     * @return registro encontrado
     */
    public static Object getRegistroByID(Class pClasse, int id, EntityManager pEM) {
        return selecaoRegistro(pEM, null, null, pClasse, UtilSBPersistencia.TipoSelecaoRegistro.ID, id);

    }

    /**
     *
     *
     * @param pClasse Classe do registro
     * @param id id do registro
     * @return regustro encontrado
     */
    public static Object getRegistroByID(Class pClasse, int id) {
        return selecaoRegistro(null, null, null, pClasse, UtilSBPersistencia.TipoSelecaoRegistro.ID, id);
    }

    public static Class<?> getEntityByTag(String pTag) {
        EntityManager em = UtilSBPersistencia.getNovoEM();
        //((Dados) BeansUtil.getAppBean("dados")).getEm();
        Set<EntityType<?>> lista = em.getMetamodel().getEntities();
        for (EntityType<?> teste : lista) {
            System.out.println(teste.getJavaType().toString());
            Class<?> classe = teste.getJavaType();
            System.out.println(teste.getClass().getName());
            return classe;
        }
        em.close();
        return null;
    }

    public static List<?> getListaBySBNQ(SBNQ pSBNQ) {
        return pSBNQ.getQueryHibernate().getResultList();
    }

    private static boolean executaSQLcmd(EntityManager pEm, String pSQl) {
        EntityManager em = pEm;
        if (em == null) {
            em = getNovoEM();
        }
        try {

            try {
                em.getTransaction().begin();
                Query q = em.createNativeQuery(pSQl);
                q.executeUpdate();
                em.getTransaction().commit();
            } finally {
                if (em != null) {
                    em.close();
                }
            }
            return true;
        } catch (Exception e) {
            SBCore.RelatarErro(ErroSB.TIPO_ERRO.ALERTA_PROGRAMADOR, "Erro executando comando SQL", e);
            return false;
        }
    }

    public static boolean executaSQL(String pSql) {
        return executaSQLcmd(null, pSql);
    }

    public static boolean executaSQL(EntityManager pEm, String pSql) {
        return executaSQLcmd(pEm, pSql);
    }

}
