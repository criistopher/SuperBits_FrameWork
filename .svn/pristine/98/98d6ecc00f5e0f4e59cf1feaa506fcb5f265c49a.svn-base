package com.super_bits.modulosSB.Persistencia.registro.NAOPersistidos;

import com.super_bits.modulosSB.Persistencia.Campo.Campo;
import com.super_bits.modulosSB.Persistencia.Campo.CampoData;
import com.super_bits.modulosSB.Persistencia.Campo.CampoEsperado;
import com.super_bits.modulosSB.Persistencia.Campo.CampoMapValores;
import com.super_bits.modulosSB.Persistencia.Campo.CampoMultiplo;
import com.super_bits.modulosSB.Persistencia.Campo.CampoUtil.tipoCampo;
import com.super_bits.modulosSB.Persistencia.InjecaoPorReflexao.excecao.MapFieldException;
import com.super_bits.modulosSB.Persistencia.anotacoes.InfoCampo;
import com.super_bits.modulosSB.Persistencia.anotacoes.InfoCampo.TC;
import com.super_bits.modulosSB.Persistencia.anotacoes.util.ErrorMessages;
import com.super_bits.modulosSB.Persistencia.util.UtilSBPersistenciaReflexaoJPA;
import com.super_bits.modulosSB.SBCore.ConfigGeral.SBCore;
import com.super_bits.modulosSB.SBCore.TratamentoDeErros.ErroSB;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

public abstract class ItemGenerico extends Object implements Serializable {

    private static final long serialVersionUID = 1917016661084214744L;
    protected CampoMapValores camposEsperados;
    private List<Campo> camposEncontrados = new ArrayList<Campo>();
    private Map<String, Object> valorCampoByName;

    private static Class<?> classeModelo;

    public String getTesteParametro(String pteste) {
        if (pteste == null) {
            pteste = "";
        }
        return "o parametro é" + pteste;
    }

    public void makeValorCampoByName() {

        Map<String, Object> resp = new TreeMap<String, Object>();

        Class<?> current = this.getClass();

        for (Field field : current.getDeclaredFields()) {
            field.setAccessible(true);
            if (!Modifier.isStatic(field.getModifiers())) {
                if (!resp.containsKey(field.getName())) {
                    try {
                        resp.put(field.getName(), field.get(this));
                    } catch (IllegalArgumentException e) {

                        e.printStackTrace();
                    } catch (IllegalAccessException e) {

                        e.printStackTrace();
                    }
                }
            }

        }
        valorCampoByName = resp;
    }

    private void aplicaValores() {
        Map<String, Field> campos = analyze(this);
        for (String nomeCampo : campos.keySet()) {
            try {
                campos.get(nomeCampo).setAccessible(true);
                campos.get(nomeCampo)
                        .set(this, valorCampoByName.get(nomeCampo));

            } catch (IllegalArgumentException | IllegalAccessException e) {

                SBCore.RelatarErro(ErroSB.TIPO_ERRO.ALERTA_PROGRAMADOR, "Erro aplicando valor padrão do campo", e);
            }
        }
    }

    public void MakeCamposEncontrados() {
        // TODO Para cada Filed adciona um Campo
        Map<String, Field> mapEncontrados = analyze(this);
        camposEncontrados.clear();
        for (String teste : mapEncontrados.keySet()) {

            Field campoEncontrado = mapEncontrados.get(teste);
            //String tipoc = campoEncontrado.getType().getSimpleName();
            //String nome = campoEncontrado.getName();
            // campoEncontrado.getDeclaredAnnotations();
            // campoEncontrado.getName();
            InfoCampo anotacaoInfoCampo = campoEncontrado
                    .getAnnotation(InfoCampo.class);
            OneToMany anotacaoUmParaMuitos = campoEncontrado
                    .getAnnotation(OneToMany.class);
            ManyToOne anotacaoMuitosParaUm = campoEncontrado
                    .getAnnotation(ManyToOne.class);
            campoEncontrado.setAccessible(true);
            if (anotacaoInfoCampo != null) {
                // TODO cria campo de acordo com anotação

                Campo novoCampo = new Campo(tipoCampo.TEXTOSIMPLES,
                        campoEncontrado);
                camposEncontrados.add(novoCampo);
            } else if (anotacaoUmParaMuitos != null) {
                // TODO cria campo de multiplas Seleções
                try {
                    CampoMultiplo novoCp = new CampoMultiplo(campoEncontrado,
                            "", campoEncontrado.get(this));
                    camposEncontrados.add(novoCp);
                } catch (IllegalArgumentException e) {

                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                }

            } else if (anotacaoMuitosParaUm != null) {
                // TODO cria campo de selecao de valor

            } else {

                Campo novoCampo = new Campo(tipoCampo.TEXTOSIMPLES,
                        campoEncontrado);

                if (campoEncontrado.getType().getSimpleName().equals("String")) {
                    camposEncontrados.add(novoCampo);
                }
                if (campoEncontrado.getType().getSimpleName().equals("int")) {
                    camposEncontrados.add(novoCampo);
                }
                if (campoEncontrado.getType().getSimpleName().equals("Date")) {
                    novoCampo = new CampoData(tipoCampo.CALENDARIO,
                            campoEncontrado);
                    camposEncontrados.add(novoCampo);

                }

            }// tipo do valor

            System.out.println("campo" + teste);
        }

    }

    public void MakeCamposEsperados() {
        // TODO De acordo com o SUPER da classe adciona os campos Esperados
    }

    protected static Map<String, Field> analyze(Object object) {
        if (object == null) {
            throw new NullPointerException();
        }

        Map<String, Field> map = new TreeMap<String, Field>();

        Class<?> current = object.getClass();

        for (Field field : current.getDeclaredFields()) {
            if (!Modifier.isStatic(field.getModifiers())) {
                if (!map.containsKey(field.getName())) {
                    map.put(field.getName(), field);
                }
            }

        }
        return map;
    }

    public void copiaDados(Object dados) {

        Map<String, Field> fromFields = analyze(dados);
        Map<String, Field> toFields = analyze(this);
        fromFields.keySet().retainAll(toFields.keySet());

        for (Entry<String, Field> fromFieldEntry : fromFields.entrySet()) {
            final String name = fromFieldEntry.getKey();
            final Field sourceField = fromFieldEntry.getValue();
            final Field targetField = toFields.get(name);
            if (targetField.getType().isAssignableFrom(sourceField.getType())) {
                sourceField.setAccessible(true);
                if (Modifier.isFinal(targetField.getModifiers())) {
                    continue;
                }
                targetField.setAccessible(true);
                try {
                    targetField.set(this, sourceField.get(dados));
                } catch (IllegalAccessException e) {
                    throw new IllegalStateException("Can't access field!");
                }
            }
        }
    }

    protected ItemGenerico() {
        super();
        this.camposEsperados = new CampoMapValores();
        classeModelo = this.getClass();

    }

    protected static Field getCampoByAnotacao(TC pNomedaAnotacao) {
        Field campo = UtilSBPersistenciaReflexaoJPA.getSBCampobyTipoCampo(classeModelo, pNomedaAnotacao);
        if (campo == null) {
            return null;
        }
        return campo;

    }

    private Field searchCampoIdentificacao() {

        System.out.println(this.getClass());
        Field[] fields = getClasseModelo().getDeclaredFields();

        for (Field field : fields) {
            Id annotationField = field.getAnnotation(Id.class);

            if (annotationField != null) {
                return field;
            }
        }

        return null;
    }

    protected void adcionaCampoEsperado(CampoEsperado pCampo) {
        Field campo;

        if (pCampo.equals("id")) {
            campo = searchCampoIdentificacao();
            pCampo.setAnotacaoObrigatoria(true);
        } else {
            campo = getCampoByAnotacao(pCampo.getTipoCampo());
        }

        if (campo != null) {
            pCampo.setCampoReflex(campo);
            pCampo.setFoiAnotado(true);

        } else {
            pCampo.setFoiAnotado(false);
        }

        camposEsperados.AdcionaCampo(pCampo);

    }

    protected Object GetValorByTipoCampoEsperado(TC tipoCampo) {
        CampoEsperado campoPadrao = camposEsperados.getCampo(tipoCampo);

        classeModelo = this.getClass();
        if (campoPadrao.getFoiAnotado()) {
            Field campoReflecao;
            try {

                campoReflecao = campoPadrao.getCampoReflex();

                campoReflecao.setAccessible(true);
                // System.out.println(campoReflecao.toString());
                Object valor;
                try {
                    String tipoDeValor = campoReflecao.getType().getName();
                    if (tipoDeValor.equals("java.lang.String")) {

                        valor = (String) campoReflecao.get(this);
                    } else {

                        // System.out.println("TTTTIIIPOOOO diferente de String:"+campoReflecao.getType().getName());
                        if (campoReflecao.getType().getName().equals("int")) {
                            // System.out.println("TTTTIIIPOOOO int");
                            valor = (Integer) campoReflecao.get(this);
                        } else if (campoReflecao.getType().getName()
                                .equals("java.lang.Double")
                                || campoReflecao.getType().getName()
                                .equals("double")) {
                            valor = (Double) campoReflecao.get(this);
                        } else if (campoReflecao.getType().getSimpleName()
                                .equals("Date")) {
                            valor = ((Date) campoReflecao.get(this)).toString();

                        } else {

                            valor = campoReflecao.get(this).toString();
                        }
                    }

                    if (valor == null || valor.toString().equals("")) {
                        return campoPadrao.getValorPadrao();
                    } else {
                        return valor;
                    }
                } catch (IllegalArgumentException | IllegalAccessException e) {

                    SBCore.RelatarErro(ErroSB.TIPO_ERRO.ALERTA_PROGRAMADOR, "erro obtendo valor de campo ", e);
                }

            } catch (SecurityException e) {

                SBCore.RelatarErro(ErroSB.TIPO_ERRO.ALERTA_PROGRAMADOR, "erro obtendo valor de campo ", e);
            }
        }

        if (campoPadrao.getAnotacaoObrigatoria()) {

            try {
                throw new MapFieldException(String.format(
                        ErrorMessages.CAMPO_ANOTACAO_OBRIGATORIO,
                        campoPadrao.getTipoCampo()));
            } catch (MapFieldException e) {

                e.printStackTrace();
            }
        }

        return campoPadrao.getValorPadrao();

    }

    public static Class<?> getClasseModelo() {

        return classeModelo;
    }

    public List<Campo> getCamposEncontrados() {
        if (camposEncontrados == null || camposEncontrados.size() == 0) {
            MakeCamposEncontrados();
        }
        return camposEncontrados;
    }

    public Map<String, Object> getValorCampoByName() {
        try {
            if (valorCampoByName == null) {
                makeValorCampoByName();
            }

            return valorCampoByName;
        } finally {
            aplicaValores();
        }
    }

    public void setValorCampoByName(Map<String, Object> valorCampoByName) {
        this.valorCampoByName = valorCampoByName;
    }

}
