/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.super_bits.modulosSB.SBCore.TratamentoDeErros;

import com.super_bits.modulosSB.SBCore.ConfigGeral.SBCore;

/**
 *
 * Classe erro básica que extende todos os erros dos projetos Super-Bits
 *
 * @author Sálvio Furbino <salviof@gmail.com>
 * @since 24/05/2014
 *
 */
public abstract class ErroSB {

    /**
     *
     * O Conceito Geral para notificação de Erros é dividido entre:
     *
     *
     * ALERTA_SISTEMA: CRIA UM LOG DO ERRO --------------------------------
     * ALERTA USUARIO: EXIBE A MENSAGEM PARA O USUARIO------------------------
     * ALERTA PROGRAMADOR: EXIBE NO SYSOUT UM ALERTA QUANDO EM DESENVOLVIMENTO,
     * SALVA EM LOG QUANDO EM TESTE, E NÃO FAZ NADA QUANDO EM PRODUÇÃO PARA
     * TUDO: EXECUTA O SYSTEM.OUT(0) CAUSANDO A PARALIZAÇÃO DO SISTEMA QUANDO EM
     * DESENVOLVIMENTO
     *
     * A forma de exibir a mensagem para o usuário ou para o programador, ou
     * arquivar um log de sistemas pode ser alterado de acordo com a aplicação
     * alterando a centralDeMensagens
     *
     */
    protected Throwable erroJava;
    protected String mensagemEnviada;

    public static enum TIPO_ERRO {

        ALERTA_SISTEMA,
        /**
         * No modo em Desenvolvimento exibe uma mensagem para o programador. em
         * produção e homologação salva um log
         */
        ALERTA_USUARIO,
        /**
         * No modo de desenvolvimento exibe uma mensagem para o programador. em
         * produção não faz nada
         */
        ALERTA_PROGRAMADOR,
        /**
         * Paraliza a execução do sistema (Utilize com muita cautela, apenas
         * onde préconfigurações importantes não tenham sido definidas)
         */
        PARA_TUDO
    }

    public void Alerta(TIPO_ERRO pTipo, String pMensagem) {
        alertar(pTipo, pMensagem, null);
    }

    public void Alerta(TIPO_ERRO pTipo, Exception pErroJava) {
        alertar(pTipo, null, pErroJava);
    }

    public void Alerta(TIPO_ERRO pTipo, String pMensagem, Throwable pErroJava) {
        alertar(pTipo, pMensagem, pErroJava);
    }

    private void alertarSistemaBase(TIPO_ERRO tipo, String pMensagem, Throwable excessaoJavaRelacionada) {
        erroJava = excessaoJavaRelacionada;
        mensagemEnviada = pMensagem;
        if (excessaoJavaRelacionada == null) {
            try {
                System.out.println("Erro não enviado gerando nova exceção para" + pMensagem);
                throw new Exception(pMensagem);
            } catch (Exception e) {
                excessaoJavaRelacionada = e;
            }
        }

        System.err.println();
        System.err.println();
        System.err.println();
        System.err.println("________________________________________________________________________________________________________________________________________________________");
        System.err.println("________________________________________________________________________________________________________________________________________________________");
        System.err.println("ERRO[" + tipo + "]:" + pMensagem);
        System.err.println("[MENSAGEM JAVA]");
        System.err.println(excessaoJavaRelacionada.getMessage());
        System.err.println("[CAUSA JAVA]");
        System.err.print(excessaoJavaRelacionada.getCause());
        System.err.println();
        System.err.println("[Mensagem Localizada]");
        System.err.println(excessaoJavaRelacionada.getLocalizedMessage());
        System.err.println("[CAMINHO]");
        excessaoJavaRelacionada.printStackTrace();
        System.err.println("________________________________________________________________________________________________________________________________________________________");
        System.err.println("________________________________________________________________________________________________________________________________________________________");
        System.err.println();
        System.err.println();
        System.err.println();
    }

    protected abstract void alertarSistema();

    protected abstract void alertarUsuario();

    private void pararSistem() {
        System.err.println("_____________________________________________________________________");
        System.err.println(" ESTE ERRO PRECISA SER CORRIGIDO ANTES DE CONTINUAR O DESENVOLVIMENTO");
        System.err.println("_____________________________________________________________________");
        System.exit(0);
    }

    private synchronized void alertar(TIPO_ERRO tipo, String mensagem, Throwable excessaoJavaRelacionada) {
        alertarSistemaBase(tipo, mensagem, excessaoJavaRelacionada);

        switch (tipo) {
            case ALERTA_SISTEMA:
                alertarSistema();

                if (SBCore.getEstadoAPP() == SBCore.ESTADO_APP.DESENVOLVIMENTO) {
                    alertarUsuario();
                }

                break;
            case PARA_TUDO:
                if (SBCore.getEstadoAPP() != SBCore.ESTADO_APP.PRODUCAO) {
                    pararSistem();
                }
                break;
            case ALERTA_USUARIO:
                if (SBCore.getEstadoAPP() == SBCore.ESTADO_APP.DESENVOLVIMENTO) {
                    alertarUsuario();
                }
                break;
            case ALERTA_PROGRAMADOR:
                if (SBCore.getEstadoAPP() == SBCore.ESTADO_APP.DESENVOLVIMENTO) {
                    alertarUsuario();
                }
        }
    }
}
