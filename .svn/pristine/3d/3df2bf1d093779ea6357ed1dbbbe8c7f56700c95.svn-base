package com.super_bits.modulosSB.Persistencia.registro.persistidos;

//import com.super_bits.modulosSB.webPaginas.ConfigGeral.CInfo;
//Simport com.super_bits.modulosSB.webPaginas.JSFBeans.util.OrganizadorDeArquivos;
import com.super_bits.modulosSB.Persistencia.dao.UtilSBPersistencia;
import com.super_bits.modulosSB.Persistencia.util.UtilSBPersistenciaArquivosDeEntidade;
import com.super_bits.modulosSB.SBCore.ConfigGeral.SBCore;
import com.super_bits.modulosSB.SBCore.InfoCampos.campo.CampoEsperado;
import com.super_bits.modulosSB.SBCore.InfoCampos.campo.FabCampos;
import com.super_bits.modulosSB.SBCore.InfoCampos.registro.Interfaces.basico.ItfBeanSimples;
import com.super_bits.modulosSB.SBCore.TratamentoDeErros.ErroSB;
import com.super_bits.modulosSB.SBCore.UtilGeral.UtilSBCoreStrings;
import java.lang.reflect.Field;
import java.rmi.UnexpectedException;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.PrePersist;

public abstract class EntidadeSimples extends EntidadeGenerica implements
        ItfBeanSimples {

    public EntidadeSimples() {
        super();

        //adcionaCampoEsperado(new CampoEsperado(TC.IMG_PEQUENA, CInfo.SITE_URL
        //CInfo.pastaImagens + "/SBPequeno.jpg"));
        adcionaCampoEsperado(new CampoEsperado(FabCampos.NOME_CURTO), true);
        adcionaCampoEsperado(new CampoEsperado(FabCampos.ID), true);

    }

    @Override
    public String getImgPequena() {

        return UtilSBPersistenciaArquivosDeEntidade.getURLImagem(this, FabCampos.IMG_PEQUENA);

    }

    @Override
    public String getNomeCurto() {
        String nome = (String) getValorByTipoCampoEsperado(FabCampos.NOME_CURTO);
        String nomeCurto = "";
        nome = nome.replace("-", " ");
        nome = nome.replace(".", " ");
        for (String parte : nome.split(" ")) {
            if (nomeCurto.length() < 15) {
                if (nomeCurto.length() > 0) {
                    nomeCurto = nomeCurto + " " + parte;
                } else {
                    nomeCurto = nomeCurto + parte;
                }
            }
        }
        return nomeCurto;
    }

    public String getNomeCurtoURLAmigavel() {
        String nomeCurto = getNomeCurto();
        return UtilSBCoreStrings.makeStrUrlAmigavel(nomeCurto);
    }

    @Override
    public int getId() {
        Object valorId = getValorByTipoCampoEsperado(FabCampos.ID).toString();
        if (valorId != null && !"".equals(valorId)) {
            return Integer.parseInt(valorId.toString());
        } else {
            return 0;
        }
    }

    public String getNomeUnico() {
        return this.getClass().getSimpleName() + getId();
    }

    /**
     *
     * Retorna o nome do Campo anotados com InfoCampo proprio para pesquisa em
     * SQL
     *
     * Futuramente este metodo deve funcionar analizando a anotação collum do
     * Hibernate para casos onde o nome da coluna é diferente
     *
     * @param pCAmpo Nome do campos procurado
     * @return O nome do campo proprio para SQL
     */
    public String getCampoSQL(FabCampos pCAmpo) {
        try {
            Field campo = getCampoByAnotacao(FabCampos.NOME_CURTO);
            if (campo == null) {

                throw new UnexpectedException("nome_curto_nao_encontrado_na_classe");

            }
            return campo.getName();
        } catch (Throwable ex) {
            SBCore.RelatarErro(ErroSB.MSG_DEST.PROGRAMADOR, "Erro tentando obter o nome do campo para select ", ex);
            return null;
        }
    }

    /**
     *
     * Retorna os nomes do Campos que foram anotados para pesquisas SQL
     *
     * Futuramente este metodo deve funcionar analizando a anotação collum do
     * Hibernate para casos onde o nome da coluna é diferente
     *
     * @param pCAmpo Tipo de campo pesquisado
     * @return Lista com os nomes encontrados
     *
     */
    public List<String> getCamposSQL(FabCampos pCAmpo) {
        List<String> lista = new ArrayList<>();
        try {

            Field campo = getCampoByAnotacao(FabCampos.NOME_CURTO);
            if (campo == null) {

                throw new UnexpectedException("nome_curto_nao_encontrado_na_classe");

            }

            lista.add(campo.getName());
        } catch (Throwable ex) {
            SBCore.RelatarErro(ErroSB.MSG_DEST.PROGRAMADOR, "Erro tentando obter o nome do campo para select ", ex);

        }
        return lista;

    }

    /**
     *
     *
     * Substitua por: getCampoSQL(FabCampos pCAmpo) Antes que seja tarde demais!
     *
     * @return
     */
    @Deprecated
    public String getCampoSQLNomeCurto() {
        return getCampoSQL(FabCampos.NOME_CURTO);
    }

    public void uploadFoto(Object event) {
        throw new UnsupportedOperationException("Ainda não implementado");
        //  FileUploadEvent evento = (Primef)
        //  String categoria = (String) event.getComponent().getAttributes()
        //           .get("catImagem");
        //    UtilSBPersistenciaArquivosDeEntidade.SalvaIMAGEM(this,
        //            event.getFile(), categoria);
        //    throw new UnsupportedOperationException("Ainda não implementado");

    }

    @Override
    public String toString() {
        if (this == null) {
            return "nulo";
        }
        return getNomeCurto();
    }

    @Override
    public int hashCode() {
        if (this == null) {
            return "nulo".hashCode();
        }

        return (getNomeUnico() + getNomeUnico()).hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        if (obj.hashCode() == this.hashCode()) {
            return true;
        } else {
            return false;
        }
    }

    public List<ItfBeanSimples> listaOpcoes(ItfBeanSimples objeto) {
        return (List) UtilSBPersistencia.getListaTodos(objeto.getClass());

    }

    @PrePersist
    public void configUsuarioAlteriou() {
        System.out.println("EXECUTOU PRE PERSIST!!!!" + this.getClass().getSimpleName());
    }

}
