/*
 *  Desenvolvido pela equipe Super-Bits.com CNPJ 20.019.971/0001-90

 */
package com.super_bits.modulosSB.SBCore.InfoCampos.campo;

import com.super_bits.modulosSB.SBCore.fabrica.ItfFabrica;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author sfurbino
 */
public enum FabCampos implements ItfFabrica {

    TEXTO_SIMPLES,
    IMG_PEQUENA,
    IMG_MEDIA,
    IMG_GRANDE,
    NOME_CURTO,
    NOME_LONGO,
    DESCRITIVO,
    ID,
    LAT,
    LONG,
    LCLOGRADOURO,
    LCCEP,
    LCBairro,
    LCCidade,
    LCTelefone,
    LCComplemeto,
    HTML,
    CHART_VALOR,
    CHART_LABEL,
    CHART_CATEGORIA,
    CALENDARIO,
    TELEFONE,
    MOEDA,
    LOOKUP,
    LOOKUPMULTIPLO,
    TEXTOSIMPLES,
    COR,
    EMAIL,
    SITE,
    URL,
    RESPONSAVEL,
    CNPJ,
    CPF,
    INSCRICAO_ESTADUAL,
    INSCRIACAO_MUNICIPAL;

    private Campo campo;

    @Override
    @Deprecated
    public Campo getRegistro() {
        throw new UnsupportedOperationException("O campo só pode ser instanciado informando o InfoCampo");
    }

    /**
     *
     * Retorna um tipo de campo padrão de acordo com a classe.
     *
     * @param pClasse
     * @return
     */
    public static FabCampos getTipoPadraoByClasse(Class pClasse) {

        if (pClasse.getSimpleName().equals("Date")) {
            return FabCampos.CALENDARIO;
        }

        return FabCampos.TEXTOSIMPLES;
    }

    public Campo getRegistro(Field pCampo) {

        return new Campo(this, pCampo);

    }

    public static Campo getTipoCampoByProp(String pProp) {
        return null;
    }

    @Override
    public List getRegistros() {
        List<Campo> tipos = new ArrayList<>();
        for (FabCampos tipo : FabCampos.values()) {
            tipos.add(tipo.getRegistro());
        }
        return tipos;
    }

    @Override
    public List getTipos() {
        List<FabCampos> tipos = new ArrayList<>();
        for (FabCampos tipo : FabCampos.values()) {
            tipos.add(tipo);
        }
        return tipos;
    }

};
